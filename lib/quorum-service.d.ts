import { Node } from "./node";
declare const _default: {
    disableCache: () => void;
    quorumSetCanReachThreshold: (quorumSet: any, publicKeysToNodesMap: any) => boolean;
    getClusterLeafNodes: (cluster: any, map: any) => any;
    getCluster: (node: any, map: any) => any;
    getNodesWithPublicKeys(nodes: any): any;
    getNodesWithQuorumSets(nodes: any): any;
    getNodesWithQuorumSetsAndPublicKeys(nodes: any): any;
    getAllClusters(nodes: any, map: any): any[];
    getAllClusterLeafs(clusters: any, map: any): any;
    getQuorumsInCluster(cluster: any, map: any): any[];
    hasQuorumIntersection(nodes: any, clusters: any, map: any): boolean;
    getQuorums: (nodes: any) => any;
    filterInActiveValidators(quorumSet: any, map: any): any;
    getNodeChainRecursive: (node: any, publicKeysToNodesMap: any, processedPublicKeys?: any[]) => any;
    isQuorum: (quorumCandidate: any, publicKeyToNodesMap: any) => any;
    allNodesContainASliceForEachMemberOfQuorum: (quorum: any, publicKeyToNodesMap: any) => boolean;
    getNodesThatContainASliceForEachMemberOfQuorum: (quorum: any, publicKeyToNodesMap: any) => any;
    hasSliceThatIsASubsetOfQuorum: (quorumSet: any, quorum: any) => boolean;
    getPossibleQuorums: (nodes: any) => any;
    getNodesPublicKeysWithQuorumSets: (nodes: any) => any;
    isSliceSubsetOfQuorum: (slice: any, quorum: any) => any;
    getPublicKeyToNodeMap(nodes: any): Map<string, Node>;
    getBitRepresentation(validator: any, publicKeys: any): number;
    hasSubSetQuorumSliceOuter: (quorumBitSet: any, quorumSet: any, cluster: any) => any;
    hasSubSetQuorumSliceInner: (quorumBitSet: any, validatorBitSets: any, threshold: any, innerQuorums: any[], cluster: any) => boolean;
    getSlices: (quorumSet: any) => any;
    getAllCombinations: (nodes: any) => any;
    getCombinationsOfSizeK: (k: any, nodesOrQSets: any) => any[];
    getCombinationsSuperFast: (publicKeys: any) => any[];
    getCombinationsSuperFastGenerator: (publicKeys: any) => IterableIterator<(number | any[])[]>;
};
export default _default;
